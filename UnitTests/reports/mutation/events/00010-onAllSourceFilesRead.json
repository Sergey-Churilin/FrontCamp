[{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Components\\Button\\AddArticleComponent.js","content":"function AddArticleController($location) {\r\n    var vm = this;\r\n\r\n    vm.addArticle = function () {\r\n        $location.path('/add');\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    name: 'btnAddArticle',\r\n    template: require('./btnAddArticle.html'),\r\n    controller: AddArticleController,\r\n    controllerAs: 'addCtrl'\r\n};"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Components\\Home\\HomeController.js","content":"function HomeController($timeout, todoFactory) {\r\n    var vm = this;\r\n    vm.items = [];\r\n    vm.tasks = todoFactory.getTasks();\r\n\r\n    vm.viewDeleted = function () {\r\n        vm.tasks = todoFactory.getTasks();\r\n    };\r\n    vm.updateView = function (startIndex, endIndex) {\r\n        vm.items = vm.tasks.slice(startIndex, endIndex);\r\n    };\r\n}\r\n\r\n\r\nmodule.exports = HomeController;\r\n"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Components\\Pagination\\PaginationComponent.js","content":"function PaginationController(PaginationFactory) {\r\n    var vm = this;\r\n    vm.pager = {};\r\n\r\n    vm.$onChanges = function () {\r\n        vm.setPage(1);\r\n    };\r\n\r\n    vm.setPage = function (page) {\r\n        // get pager object from service\r\n        vm.pager = PaginationFactory.getPager(vm.elementsAmount, page);\r\n        if (page < 1 || page > vm.pager.totalPages) {\r\n            return;\r\n        }\r\n\r\n\r\n        vm.updateView({startIndex: vm.pager.startIndex, endIndex: vm.pager.endIndex + 1});\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    name: 'pagination',\r\n    template: require('./pagination.html'),\r\n    controller: PaginationController,\r\n    controllerAs: 'PaginationCtrl',\r\n    bindings: {\r\n        updateView: '&',\r\n        elementsAmount: '<'\r\n    }\r\n};"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Components\\TodoComponent\\toDoComponent.js","content":"function toDoController(todoFactory) {\r\n    var vm = this;\r\n\r\n    vm.removeTask = function (task) {\r\n        todoFactory.removeTask(task, function(){\r\n            vm.viewDeleted();\r\n        });\r\n    };\r\n}\r\n\r\nmodule.exports = {\r\n    name: 'todo',\r\n    template: require('./todo.html'),\r\n    controller: toDoController,\r\n    controllerAs: 'todoCtrl',\r\n    bindings: {\r\n        viewDeleted: '&',\r\n        task: '<'\r\n    }\r\n};\r\n"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Controllers\\addTodoController.js","content":"function addTodoController(todoFactory) {\r\n    var vm = this;\r\n    vm.header = \"Add a Task\";\r\n    vm.save = function () {\r\n        todoFactory.addTask(vm.task);\r\n        vm.task = {\r\n            text:\"\",\r\n            content:\"\"\r\n        };\r\n    };\r\n}\r\n\r\nmodule.exports = addTodoController;\r\n"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Controllers\\editController.js","content":"function editController($location, $routeParams, todoFactory) {\r\n    var vm = this;\r\n    vm.header = \"Edit a Task\";\r\n\r\n    vm.task = todoFactory.getTaskById(Number($routeParams.id));\r\n\r\n    vm.save = function () {\r\n        todoFactory.save(vm.task, function(){\r\n            $location.path('/home');\r\n        });\r\n    };\r\n\r\n}\r\n\r\nmodule.exports = editController;\r\n"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Directives\\minLength.js","content":"function MinLengthDirective() {\r\n    return {\r\n        require: 'ngModel',\r\n        link: function ($scope, $element, $attr, $ctrl) {\r\n            function lengthValidation(value) {\r\n                return $ctrl.$setValidity('minLength', value.length >= 20);\r\n            }\r\n\r\n            $ctrl.$parsers.push(lengthValidation);\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = MinLengthDirective;"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Factories\\paginationFactory.js","content":"function PaginationFactory() {\r\n    var service = {};\r\n\r\n    service.getPager = function (totalItems, currentPage, pageSize) {\r\n        // default to first page\r\n        currentPage = currentPage || 1;\r\n\r\n        // default page size is 10\r\n        pageSize = pageSize || 10;\r\n\r\n        // calculate total pages\r\n        var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        var startPage, endPage;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        var startIndex = (currentPage - 1) * pageSize;\r\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        var pages = [];\r\n        for (var i = 1; i < endPage + 1; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    };\r\n\r\n    return service;\r\n}\r\n\r\nmodule.exports = PaginationFactory;"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Factories\\requestFactory.js","content":"function requestFactory($resource) {\r\n    var baseUrl = \"http://localhost:3000/todos\";\r\n    var Todos = $resource(baseUrl + \"/:id\", {id: '@id'}, {\r\n        update: {method: 'PUT'},\r\n        getTaskById:{method: 'GET'}\r\n    });\r\n\r\n    return {\r\n        addTask: function (todo) {\r\n            Todos.save(todo);\r\n        },\r\n\r\n        getTasks: function () {\r\n            return Todos.query();\r\n        },\r\n\r\n        updateTask: function (todo, callback) {\r\n            Todos.update({id: todo.id}, todo)\r\n                .$promise.then(function(){\r\n                if(callback){\r\n                    callback();\r\n                }\r\n            })\r\n        },\r\n\r\n        removeTask: function (todo, callback) {\r\n            Todos.delete({id: todo.id})\r\n                .$promise.then(function(){\r\n                    if(callback){\r\n                        callback();\r\n                    }\r\n            });\r\n        },\r\n        getTaskById: function(id){\r\n            return Todos.getTaskById({id: id});\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = requestFactory;"},{"path":"D:\\Mavric\\FrontCamp\\FrontCamp\\UnitTests\\src\\Factories\\todoFactory.js","content":"function todoFactory(requestFactory) {\r\n    return {\r\n        getTasks: function getTasks() {\r\n            return requestFactory.getTasks();\r\n        },\r\n        getTaskById: function getTaskById(id) {\r\n            return requestFactory.getTaskById(id);\r\n        },\r\n        addTask: function addTask(todo) {\r\n            var task = {\r\n                id: Math.round(Math.random() * 10000000000),\r\n                name: todo.name,\r\n                date: new Date().getTime(),\r\n                content: todo.content,\r\n                status: \"new\",\r\n                mode: \"none\",\r\n                visible: true\r\n            };\r\n            requestFactory.addTask(task);\r\n        },\r\n        removeTask: function removeTask(todo, callback) {\r\n            requestFactory.removeTask(todo, callback)\r\n        },\r\n        save: function (task, callback) {\r\n            requestFactory.updateTask(task, callback);\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = todoFactory;"}]